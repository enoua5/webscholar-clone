package edu.weber.auth.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.List;

/**
 * The class defines attributes that are associated with a client, such as the client ID and secret, access token
 * validity, scope, authorized grant types, and refresh token validity. The class also includes getter and setter
 * methods to retrieve and update the attributes.
 * This is a JPA entity that maps to a database table called "oauth_client_details"
 */

@Entity
@Table(name="oauth_client_details")
public class Client {

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="id")
	private long id; // Generated by the database
	
	@Column(name="client_id")
	private String clientId; // The ID used for authenication and authorization
	
	@Column(name="client_secret")
	private String clientSecret; // The password used for authenication and authorization
	
	@Column(name="access_token_validity")
	private int accessTokenValidity; // the validity period for access tokens, in seconds
	
	@Column(name="scope")
	private String scope; // the scope of the client's access, indicating which resources can be accessed
	
	@Column(name="authorities")
	private String authorities; // the authorities granted to the client (what they can do)
	
	@Column(name="authorized_grant_types")
	private String authorizedGrantTypes; // the grant types authorized for the client (Obtainable tokens)
	//TODO Authorized Grant Types should be stored in a list
	
	@Column(name="refresh_token_validity")
	private int refreshTokenValidity; // the validity period for refresh tokens, in seconds

	@Column(name="resource_ids")
	private String resourceIds; // the resource IDs that the client is authorized to access
	
	@Column(name="web_server_redirect_uri")
	private String webServerRedirectUri; // the URI to redirect the user to after authentication
	
	@Column(name="autoapprove")
	private String autoApprove; // whether the client is automatically approved for access without user consent
	
	@Column(name="additional_information")
	private String addInfo; // additional information about the client, stored as a JSON object

	// constructor for superclass
	public Client() {
		super();
	}

	// constructor with required fields
	public Client(String clientId, String clientSecret, int accessTokenValidity, String scope, String authorities,
				  String authorizedGrantTypes, int refreshTokenValidity, String resourceIds) {
		super();
		if (clientId == null || clientId.trim().isEmpty()) {
			throw new IllegalArgumentException("Client ID cannot be empty");
		}
		if (clientSecret == null || clientSecret.trim().isEmpty()) {
			throw new IllegalArgumentException("Client secret cannot be empty");
		}
		if (accessTokenValidity < 0) {
			throw new IllegalArgumentException("Access token validity must be greater than or equal to 0");
		}
		if (refreshTokenValidity < 0) {
			throw new IllegalArgumentException("Refresh token validity must be greater than or equal to 0");
		}
		this.clientId = clientId;
		this.clientSecret = clientSecret;
		this.accessTokenValidity = accessTokenValidity;
		this.scope = scope;
		this.authorities = authorities;
		this.authorizedGrantTypes = authorizedGrantTypes;
		this.refreshTokenValidity = refreshTokenValidity;
		this.resourceIds = resourceIds;
	}

	// constructor with optional redirect URI
	public Client(String clientId, String clientSecret, int accessTokenValidity, String scope, String authorities,
				  String authorizedGrantTypes, int refreshTokenValidity, String resourceIds, String redirectUri) {
		super();
		if (clientId == null || clientId.trim().isEmpty()) {
			throw new IllegalArgumentException("Client ID cannot be empty");
		}
		if (clientSecret == null || clientSecret.trim().isEmpty()) {
			throw new IllegalArgumentException("Client secret cannot be empty");
		}
		if (accessTokenValidity < 0) {
			throw new IllegalArgumentException("Access token validity must be greater than or equal to 0");
		}
		if (refreshTokenValidity < 0) {
			throw new IllegalArgumentException("Refresh token validity must be greater than or equal to 0");
		}
		this.clientId = clientId;
		this.clientSecret = clientSecret;
		this.accessTokenValidity = accessTokenValidity;
		this.scope = scope;
		this.authorities = authorities;
		this.authorizedGrantTypes = authorizedGrantTypes;
		this.refreshTokenValidity = refreshTokenValidity;
		this.resourceIds = resourceIds;
		this.webServerRedirectUri = redirectUri;
	}

	// All the methods below implement CRUD functionality.

	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	public String getClientId() {
		return clientId;
	}

	public void setClientId(String clientId) {
		this.clientId = clientId;
	}

	public String getClientSecret() {
		return clientSecret;
	}

	public void setClientSecret(String clientSecret) {
		this.clientSecret = clientSecret;
	}

	public int getAccessTokenValidity() {
		return accessTokenValidity;
	}

	public void setAccessTokenValidity(int accessTokenValidity) {
		this.accessTokenValidity = accessTokenValidity;
	}

	public String getScope() {
		return scope;
	}

	public void setScope(String scope) {
		this.scope = scope;
	}

	//TODO Needs to be changed to a list
	public String getAuthorities() {
		return authorities;
	}

	//TODO Needs to be changed to a list
	public void setAuthorities(String authorities) {
		this.authorities = authorities;
	}

	public String getAuthorizedGrantTypes() {
		return authorizedGrantTypes;
	}

	public void setAuthorizedGrantTypes(String authorizedGrantTypes) {
		this.authorizedGrantTypes = authorizedGrantTypes;
	}

	public int getRefreshTokenValidity() {
		return refreshTokenValidity;
	}

	public void setRefreshTokenValidity(int refreshTokenValidity) {
		this.refreshTokenValidity = refreshTokenValidity;
	}

	public String getResourceId() {
		return resourceIds;
	}

	public void setResourceId(String resourceId) {
		this.resourceIds = resourceId;
	}



	public String getResourceIds() {
		return resourceIds;
	}



	public void setResourceIds(String resourceIds) {
		this.resourceIds = resourceIds;
	}



	public String getWebServerRedirectUri() {
		return webServerRedirectUri;
	}



	public void setWebServerRedirectUri(String webServerRedirectUri) {
		this.webServerRedirectUri = webServerRedirectUri;
	}



	public String getAutoApprove() {
		return autoApprove;
	}



	public void setAutoApprove(String autoApprove) {
		this.autoApprove = autoApprove;
	}



	public String getAddInfo() {
		return addInfo;
	}



	public void setAddInfo(String addInfo) {
		this.addInfo = addInfo;
	}



	
}
