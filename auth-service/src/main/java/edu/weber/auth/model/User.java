package edu.weber.auth.model;

import javax.persistence.*;
import java.io.Serial;
import java.io.Serializable;

/**
 * This represents a User model within the system.
 * The "Client" class is for a client using the system
 * This class is for accounts
 */
@Entity
@Table(name="user")
public class User implements Serializable {

	/**
	 * This is a data model. It helps us put data into the backend and send data
	 * to the frontend in a standardized format.
	 */
	@Serial
	private static final long serialVersionUID = 1L;
	//private static final long serialVersionUID = 983648238746032841L;

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="user_id")
	private int userId; // Auto Generated by DB
	
	@Column(name="user_name")
	private String userName;
	
	@Column(name="user_password")
	private String password;
	
	@Column(name="user_type")
	private String userType;

	@ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "role_id")
	private Role userRole;
	
	//	@ManyToMany(mappedBy = "consumers", cascade = CascadeType.PERSIST, fetch = FetchType.EAGER)
	//	private Set<Utility> utilitites;


	public User() {
		super();
	}

	/**
	 * Creates a new User with the specified username, user type, and password.
	 *
	 * @param userName the username
	 * @param userType the user type
	 * @param password the user password
	 *
	 * @throws IllegalArgumentException if any of the input parameters are null or empty
	 */
	public User(String userName, String userType, String password) {
		if (userName == null || userName.trim().isEmpty()) {
			throw new IllegalArgumentException("userName cannot be empty");
		}
		if (userType == null || userType.trim().isEmpty()) {
			throw new IllegalArgumentException("userType cannot be empty");
		}
		if (password == null || password.trim().isEmpty()) {
			throw new IllegalArgumentException("password cannot be empty");
		}
		this.userName = userName;
		this.userType = userType;
		this.password = password;
	}

	/**
	 * Creates a new User with the same attributes as the specified User object.
	 *
	 * @param user the User object to copy
	 */
	public User(User user) {
		super();
		this.userId = user.getUserId();
		this.userName = user.getUserName();
		this.password = user.getPassword();
		this.userType = user.getUserType();
		this.userRole = user.getUserRole();
	}

	// All the methods below implement CRUD functionality.

	public int getUserId() {
		return userId;
	}

	public void setUserId(int userId) {
		this.userId = userId;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getUserType() {
		return userType;
	}

	public void setUserType(String userType) {
		this.userType = userType;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}
	
	public Role getUserRole() {
		return userRole;
	}

	public void setUserRole(Role role) {
		this.userRole = role;
	}
	
}
